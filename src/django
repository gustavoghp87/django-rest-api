modheaders desde sitio

buscar github/gitignore/Python.gitignore


vagrant  desde sitio o terminal --> vagrant init    -->
	copiar vagrant file del repositorio del curso     y agregar config.vm.synced_folder '../src', 'home/vagrant/src'
	para que sincronice             marcha atrás:   vagrant global-status    vagrant destroy [código de VM]

vagrant up        en carpeta root, crea ubuntu server virtual       (tener instalado virtualbox)
Ir a VM con vagrant ssh y tiene que haber una carpeta src en la home del usuario vagrant
vagrant ssh       conecta a VM, se sale con exit, sudo reboot, usuario = vagrant

En home/vagrant/
	virtualenv profiles_api --python=python3       para crear entorno virtual en la máquina virtual y usar solo python3
	source profiles_api/bin/activate        para activar el entorno, corroborar con pip freeze y python --version   contrario: deactivate
	pip(3) install django
	pip install djangorestframework
	
En home/vagrant/src/
	django-admin.py startproject profiles_project       crea manage.py y subcapeta de mismo nombre del proyecto
En home/vagrant/src/profiles_project/
	python manage.py startapp profiles_api


agregar 'rest_framework', 'rest_framework.authtoken', 'profiles_api'     a settings.py INSTALLED_APPS = []


pip freeze > requirements     en /src/

django trae su servidor de prueba:   python manage.py runserver 0.0.0.0:8080
ver en el navegador


---o---

Los modelos se escriben en profiles_api/models.py        completarlo con los campos requeridos para el logging

agregar AUTH_USER_MODEL = 'profiles_api.UserProfile'     en profiles_project/profiles_project/settings.py abajo de todo


---o---

Django trae "migración de databases" para administrar la base de datos sin usar código sql

En /src/profiles_project/
	python manage.py makemigrations      crea la carpeta migrations dentro de profiles_api/ con los archivos que van a conectar al 
administrador de usuarios y la base de datos
	python manage.py migrate
	python manage.py showmigrations --list

Crear un superusuario:    python manage.py createsuperuser

Registrar el modelo en admin.py
	from . import models
	admin.site.register(models.UserProfile)


python manage.py runserver 0.0.0.0:8080
	En máquina física localhost:8080 y localhost:8080/admin   para administrar, crear usuarios, etc.


-----------------------------------------------------------------------------------------------------------------------------------------

Con django rest framework hay dos clases modelo para hacer API endpoints

-APIView maneja la lógica
	Usa métodos HTTP estándar: get, post, put, patch, delete, ayuda a trabajar con archivos locales y llama a otras API
	Se usa cuando se quiere tener un control completo, cuando se procesan archivos y se renderizan respuesta síncronas,
	cuando se llaman a otras API, y cuando se quiere acceder a archivos locales o datos

	En pp/profiles_api/views.py se diseña la vista para el visitante del endpoint
		importar 'from rest_framework.views import APIView' y 'from rest_fremawork.response import Response'
		agregar clase get que retorne un diccionario {mensaje:lista}
	Para que el usuario pueda acceder a esta view hay que trabajar el archivo pp/pp/urls.py usando el URL dispacher
		importar 'from django.conf.urls import include' y agregar paths al urlpatterns redireccionando a las url de la api
	Crear pp/pa/urls.py
		'from django.conf.urls import url' 'from . import views' urlpatterns = [url(r'^hello-view/', views.HelloApiView.as_view())]


	Serializable: es un objeto que describe la información que describe los datos que se envían y son recuperados (POJO, Task, Post)
		convierte el string JSON en objeto python
		crear archivo en /pp/pa/serializers.py importando serializers y construyendo clase
		importar el serializer en el pa/views.py, importar status, crear una instancia,
		definir las funciones post, get, put (actualizar), path (actualizar parcialmente) y delete


-Viewset se enfoca en operaciones de bases de datos
	Usar funciones estandarizadas comunes: List, Create, Retrieve, Update, Partial Update, Destroy
	Se usa para crud, para APIs simples y rápidas que manejen objetos, o cuando no se necesita personalizar la lógica o
	 se trabaja con estructuras de datos estándar

	importar 'from rest_framework import viewsets' en views y agregar clase con los métodos
	Tiene un enrutador. En pp/pa/urls.py 'from django.conf.urls import include' 'from rest_framework.routers import DefaultRouter'
	 y agregar las url

	http://localhost:8000/api/hello-viewset/1/    el número es el id del objeto en la base de datos sql, aparece el put y entrando
	 Raw data está también el patch


--------------------------------------------------------------------------------------------------------------------------------------

La app consiste en dominio/api para listar los perfiles (get), api/<user_id> para ver un perfil en particular, y modificar (x2) y eliminar perfiles

	importar models en serializer.py y crear clase UserProfileSerializer, clase anidada Meta, función Create para crear usuarios
	importar models en views y crear la clase UserProfileViewSet 
	ahora hay que registrar el nuevo usuario en urls para que tenga su dominio/api/<userProfile>
		router.register('profile', views.UserProfileViewSet)

Permisos:
	Crear archivo pp/pa/permissions.py   con clase UpdateOwnProfile   y función has_object_permission
	En views  from rest_framework.authentication import TokenAuthentication   y   from . import permissions
	 agregar a la clase UserProfileViewSet:
	   authentication_classes = (TokenAuthentication,)  y  permission_classes = (permissions.UpdateOwnProfile,)
	Se ocultan los formularios de edición
	
Buscador de perfiles:
	importar en views:   from rest_framework import filters   y  se agrega a la clase UserProfileViewSet  :
	 filter_backends = (filters.SearchFilter,)    y    search_fields = ('name', 'email',)


Sistema de login:
	En views, from rest_framework.authtoken.serializers import AuthTokenSerializer
	          from rest_framework.authtoken.views import ObtainAuthToken
	 y crear la clase LoginViewSet con la función Create
	Registrar en urls   router.register('login', views.LoginViewSet, base_name='login')
	Ahora la sección /login genera un token y lo imprime por pantalla   
	Instalar la extensión de Chrome 'ModHeaders'. Nombre 'Authorization', value 'Token 8e330a5c6a567720889850a0c828dff4989a536d'
	Agregarle un filter para evitar que trabaje sobre otras apps, *//localhost:8000/*
	Accediendo a /api/profile/id se puede ver que están disponibles los métodos de modificación de datos
	Para logout descheckear desde la extensión. Estar logueado significa generar token desde login y usarlo desde extensión.

Sistema de posteos ('feed'):
	-Listado de posteos por fecha /api/feed                   con get y post
	-url del ítem en particular /api/feed/<feed_item_id>/     con get, put, patch y delete

	En models crear la clase ProfileFeedItem y método __str__
	python manage.py makemigrations   python manage.py makemigrations    en máquina virtual con venv activado
	Y registrar en admin.py    admin.site.register(models.ProfileFeedItem)
	Crear en serializer la clase ProfileFeedItemSerializer con método Meta
	
	Se crea un viewset para el feed item:
	En views se crea la clase UserProfileFeedViewSet    con método perform_create
	Y agregar a url    router.register('feed', views.UserProfileFeedViewSet)
	
	Permisos: en permissions  crear clase PostOwnStatus con función   has_object_permission
		en views importar from rest_framework.permissions import IsAuthenticatedOrReadOnly y agregar permission_classes =
		(permissions.PostOwnStatus, IsAuthenticatedOrReadOnly) a la clase UserProfileFeedViewSet
	Entrando por http://localhost:8000/api/feed/4/ se accede a la edición del posteo
	Restringir acceso a sector posteos a solamente logueados: 
		En views importar    from rest_framework.permissions import IsAuthenticated     y borrar la parte final de
		  permission_classes = (permissions.PostOwnStatus, IsAuthenticatedOrReadOnly)   --> IsAuthenticated


DEPLOY

Crear carpeta Deploy junto a src/ junto a Vagrantfile
En requirements agregar uWSGI==2.0.18
Copiar la configuración de nginx que está en github y pegarla en un archivo deploy/nginx_profiles_api.conf
Mismo supervisor_profiles_api.conf   y   server_setup.sh  cambiando la dirección de github
sudo apt-get install wget en aws por si no está
En github en server_setup.sh click en raw para pasaar a texto plano y copiar la url
wget <https>
Darse permisos de ejecución    sudo chmod +x server_setup.sh
Ejecutar con   sudo ./server_setup.sh



